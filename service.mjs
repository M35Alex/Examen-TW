import Sequelize from 'sequelize';
import { Company, Founder} from './repository.mjs';

function valid(Model, payload) {
    return Object.entries (Model.tableAttributes).reduce((valid, [name, field]) => {
        if (valid
            && !field._autoGenerated
            && !field.primarykey
            && field.allowNull === false
            && !payload[name]) {
                 valid = false;
            }
        return valid;
   }, true);
} 

function attributes(request) {
    if (request.headers['x-fields']) {
        return request.headers['x-fields'].split(',');
     } else {
        return undefined;
    }
}

function where(request) {
    if (request.query.filter) {
        return request.query.filter.split(',').reduce( (filter, condition) => {
            let data = condition.split('-');
            filter[data[0]] = {[Sequelize.Op[data[1]]]: data[2]};
            return filter;
       }, {});
     } else {
        return undefined;
     }
}

function order(request){
    if(request.headers['x-sort']){
        return request.headers['x-sort'].split(',').reduce((sort, field)=>{
            sort.push([field.substring(1), field.charAt(0) === '+' ? 'ASC': 'DESC']);

            return sort;
        }, [])
    }else{
        return undefined;
    }
}

async function getCompanies(request, response) {
	try {
		let Companies = await Company.findAll({
            attributes: attributes (request),
            order: order(request),
            where: where(request)
            });
		if (Companies.length > 0) {
			response.status(200).json(Companies);
		} else {
			response.status(204).send();
		}
	} catch (error) {
		response.status(500).json(error);
	}
}

async function getCompany(request, response) {
	try {
		if (request.params.id) {
			const company = await Company.findByPk(request.params.id, {
                attributes: attributes (request)
                });
			if (company) {
				response.json(company);
			} else {
				response.status(404).send();
			}
		} else {
			response.status(400).send();
		}
	} catch (error) {
		response.status(500).json(error);
	}
}

async function putCompany(request, response) {
    try {
        let comp = await Company.findByPk(request.params.id);
        if (comp) {
            if(valid(Company, request.body)){
            await comp.update(request.body);
            response.status(204).send();
            }
            else {
                response.status(400).send();
            }
        } 
        else {
            response.status(404).send();
        }

    } catch (error) {
        response.status(500).json(error);
    }
}

async function addCompany(request, response) {
	try {
		if (request.body.name
			&& request.body.date) {
			await Company.create(request.body);
			response.status(201).send();
		} else {
			response.status(400).send();
		}
	} catch (error) {
		response.status(500).json(error);
	}
}

async function saveCompany(request, response) {
	try {
		const company = await Company.findByPk(request.params.id);
		if (company) {
			Object.entries(request.body).forEach(([name, value]) => company[name] = value);
			await company.save();
			response.status(204).send();
		} else {
			response.status(404).send();
		}
	} catch (error) {
		response.status(500).json(error);
	}
}

async function removeCompany(request, response) {
	try {
		if (request.params.id) {
			const company = await Company.findByPk(request.params.id);
			if (company) {
				await company.destroy();
				response.status(204).send();
			} else {
				response.status(404).send();
			}
		} else {
			response.status(400).send();
		}
	} catch (error) {
		response.status(500).json(error);
	}
}

async function getFounders(request, response) {
	try {
		const founders = await Founder.findAll({attributes: attributes(request), order: order(request), where: where(request)});
		if (founders.length > 0) {
			response.status(200).json(founders);
		} else {
			response.status(204).send();
		}
	} catch (error) {
		response.status(500).json(error);
	}
}

async function getFounder(request, response) {
	try {
		if (request.params.id) {
			const founder = await Founder.findByPk(request.params.id);
			if (founder) {
				response.json(founder);
			} else {
				response.status(404).send();
			}
		} else {
			response.status(400).send();
		}
	} catch (error) {
		response.status(500).json(error);
	}
}

async function addFounder(request, response) {
	try {
		if (request.body.name
			&& request.body.role) {
			await Founder.create(request.body);
			response.status(201).send();
		} else {
			response.status(400).send();
		}
	} catch (error) {
		response.status(500).json(error);
	}
}

async function saveFounder(request, response) {
	try {
		const founder = await Founder.findByPk(request.params.id);
		if (founder) {
			Object.entries(request.body).forEach(([name, value]) => founder[name] = value);
			await founder.save();
			response.status(204).send();
		} else {
			response.status(404).send();
		}
	} catch (error) {
		response.status(500).json(error);
	}
}

async function removeFounder(request, response) {
	try {
		if (request.params.id) {
			const founder = await Founder.findByPk(request.params.id);
			if (founder) {
				await founder.destroy();
				response.status(204).send();
			} else {
				response.status(404).send();
			}
		} else {
			response.status(400).send();
		}
	} catch (error) {
		response.status(500).json(error);
	}
}

async function putFounder(request, response) {
    try {
        let founder = await Founder.findByPk(request.params.id);
        if (founder) {
            await founder.update(request.body);
            response.status(204).send();
        } 
        else {
            response.status(404).send();
        }

    } catch (error) {
        response.status(500).json(error);
    }
}

export {
	getCompanies, getCompany, addCompany, saveCompany, removeCompany, putCompany,
	getFounders, getFounder, addFounder, saveFounder, removeFounder, putFounder
}